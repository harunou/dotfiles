#!/bin/bash
# vim: set ft=sh:

h_have() {
  type "$1" &>/dev/null;
}

h_get_package_json_file() {
  echo './package.json'
}

h_get_package_manager_name() {
  if [[ -f yarn.lock ]]; then
    echo "yarn"
  elif [[ -f pnpm-lock.yaml ]]; then
    echo "pnpm"
  elif [[ -f package-lock.json ]]; then
    echo "npm"
  fi
}

h_notify_package_manager_is_not_detected_and_throw() {
  local message="no lockfile found. Please make sure to run 'np' in a directory that contains either a yarn.lock, pnpm-lock.yaml, or package-lock.json file."
  echo "`basename "$0"`: $message" >&2; 
  exit 1 
}

h_notify_package_manager_is_not_installed_and_throw() {
  local message="Package manager is not installed or not recognized."
  echo "`basename "$0"` $1: $message" >&2; 
  exit 1 
}

h_is_npm_command() {
  local npm_commands="access, adduser, audit, bin, bugs, cache, ci, completion,
  config, dedupe, deprecate, diff, dist-tag, docs, doctor,
  edit, exec, explain, explore, find-dupes, fund, get, help,
  hook, init, install, install-ci-test, install-test, link,
  ll, login, logout, ls, org, outdated, owner, pack, ping,
  pkg, prefix, profile, prune, publish, query, rebuild, repo,
  restart, root, run-script, search, set, set-script,
  shrinkwrap, star, stars, start, stop, team, test, token,
  uninstall, unpublish, unstar, update, version, view, whoami"

  npm_commands=`echo "$npm_commands" | sed 's/ //g; s/,/ /g'`

  if [[ $npm_commands =~ (^|[[:space:]])"$1"($|[[:space:]]) ]]; then
    echo "0"
  else
    echo "1"
  fi
}

h_run_npm_command() {
  if [[ `h_is_npm_command "$1"` == "0" ]]; then
    command npm "$@"
  else
    command npm run "$@"
  fi
}

h_run_yarn_command() {
  command yarn "$@"
}

h_run_pnpm_command() {
  local h_command=$1
  case $h_command in 
    ci)
      echo "np: deleting ./node_modules"
      rm -rf ./node_modules
      echo "np: installing packages"
      command pnpm install
      ;;
    *)
      command pnpm "$@"
      ;;
  esac

}

h_get_package_json_property_object() {
  local package_json="$1"
  local property="$2"
  cat "$package_json" |
    sed -nE "/^  \"$property\": \{$/,/^  \},?$/p" | # Grab scripts object
    sed '1d;$d' |                                   # Remove first/last lines
    sed -E 's/    "([^"]+)": "(.+)",?/\1=>\2/'      # Parse into key=>value
}

h_get_package_json_scripts() {
  local package_json=$1
  local max_line_length=$(tput cols)

  echo ""
  h_get_package_json_property_object "$package_json" scripts |
    sed -E 's/(.+)=>(.+)/    \1 => \2/' | 
    cut -c 1-"$max_line_length"  
  echo ""
}

h_get_package_json_scripts_suggestion() {
  local package_json=$1
  h_get_package_json_property_object "$package_json" scripts |
    sed -E 's/(.+)=>(.+)/\1:$ \2/' |  # Parse commands into suggestions
    sed 's/\(:\)[^$]/\\&/g' |         # Escape ":" in commands
    sed 's/\(:\)$[^ ]/\\&/g'          # Escape ":$" without a space in commands
}

h_command="$1"

case $h_command in 
  status|st) 
    package_manager=`h_get_package_manager_name`
    [[ -z $package_manager ]] && h_notify_package_manager_is_not_detected_and_throw
    echo "Package manager: $package_manager"
    if h_have $package_manager; then 
      echo "Package manager: is installed"
    else
      echo "Package manager: is not installed"
    fi
    ;;
  scripts|sc)
    h_get_package_json_scripts `h_get_package_json_file`
    ;;
  rawscripts)
    h_get_package_json_property_object `h_get_package_json_file` scripts
    ;;
  *)
    package_manager=`h_get_package_manager_name`
    [[ -z $package_manager ]] && h_notify_package_manager_is_not_detected_and_throw
    h_have $package_manager || h_notify_package_manager_is_not_installed_and_throw
    case $package_manager in 
      npm)
	h_run_npm_command "$@"
	;;
      yarn) 
	h_run_yarn_command "$@"
	;;
      pnpm)
	h_run_pnpm_command "$@"
	;;
    esac
    ;;
esac
